<?xml version="1.0" encoding="utf-8" ?>
<fragment xmlns="http://resources.qdexapps.com/schema/v1/QDocument.xsd">
  <include src="plotTools.xml"/>
  <script>
    <![CDATA[
    --------------------------- Math Methods ---------------------------
    function round(value,multiple)
      local remainder = value % multiple;
      if remainder * 2 >= multiple then
          return value - remainder + multiple;
      else
          return value - remainder;
      end
    end
    
    function convertToRadians(deg)
      rad = (deg*math.pi)/180;
      return rad;
    end
    
    function getTableSize(T)
      local count = 0
      for _ in pairs(T) do count = count + 1 end
        return count
      end
    
    function emptyTable(t)
      for k in pairs (t) do
        t [k] = nil;
      end
    end
    
    function dotProduct(a,b)
      return (a.x * b.x) + (a.y * b.y);
    end
    
    function intervalDistance(minA,maxA,minB,maxB)
      if minA < minB then
        return minB - maxA;
      else
        return minA - maxB;
      end
    end
    
    -- copy function from https://gist.github.com/tylerneylon/81333721109155b2d244
    function copy(obj)
      if type(obj) ~= 'table' then return obj end
      local res = setmetatable({}, getmetatable(obj))
      for k, v in pairs(obj) do res[copy(k)] = copy(v) end
      return res
    end
    
    --------------------------- Vector Class --------------------------
    -- From https://gist.github.com/johannesgijsbers/880372fc8800e5d5f3e4
    Vector = {}
    Vector.__index = Vector

    function Vector.__add(a, b)
      if type(a) == "number" then
        return Vector.new(b.x + a, b.y + a)
      elseif type(b) == "number" then
        return Vector.new(a.x + b, a.y + b)
      else
        return Vector.new(a.x + b.x, a.y + b.y)
      end
    end

    function Vector.__sub(a, b)
      if type(a) == "number" then
        return Vector.new(a - b.x, a - b.y)
      elseif type(b) == "number" then
        return Vector.new(a.x - b, a.y - b)
      else
        return Vector.new(a.x - b.x, a.y - b.y)
      end
    end

    function Vector.__mul(a, b)
      if type(a) == "number" then
        return Vector.new(b.x * a, b.y * a)
      elseif type(b) == "number" then
        return Vector.new(a.x * b, a.y * b)
      else
        return Vector.new(a.x * b.x, a.y * b.y)
      end
    end

    function Vector.__div(a, b)
      if type(a) == "number" then
        return Vector.new(a / b.x, a / b.y)
      elseif type(b) == "number" then
        return Vector.new(a.x / b, a.y / b)
      else
        return Vector.new(a.x / b.x, a.y / b.y)
      end
    end

    function Vector.__eq(a, b)
      return a.x == b.x and a.y == b.y
    end

    function Vector.__lt(a, b)
      return a.x < b.x or (a.x == b.x and a.y < b.y)
    end

    function Vector.__le(a, b)
      return a.x <= b.x and a.y <= b.y
    end

    function Vector.__tostring(a)
      return "(" .. a.x .. ", " .. a.y .. ")"
    end

    function Vector.new(x, y)
      return setmetatable({ x = x or 0, y = y or 0 }, Vector)
    end

    function Vector.distance(a, b)
      return (b - a):len()
    end

    function Vector:clone()
      return Vector.new(self.x, self.y)
    end

    function Vector:unpack()
      return self.x, self.y
    end

    function Vector:len()
      return math.sqrt(self.x * self.x + self.y * self.y)
    end

    function Vector:lenSq()
      return self.x * self.x + self.y * self.y
    end

    function Vector:normalize()
      local len = self:len()
      self.x = self.x / len
      self.y = self.y / len
      return self
    end

    function Vector:normalized()
      return self / self:len()
    end

    function Vector:rotate(phi)
      local c = math.cos(phi)
      local s = math.sin(phi)
      self.x = c * self.x - s * self.y
      self.y = s * self.x + c * self.y
      return self
    end

    function Vector:rotated(phi)
      return self:clone():rotate(phi)
    end

    function Vector:perpendicular()
      return Vector.new(-self.y, self.x)
    end

    function Vector:projectOn(other)
      return (self * other) * other / other:lenSq()
    end

    function Vector:cross(other)
      return self.x * other.y - self.y * other.x
    end

    setmetatable(Vector, { __call = function(_, ...) return Vector.new(...) end })
    
  
    --------------------------- World Class ---------------------------
    
    World = {minX, minY, maxX, maxY, balls={}, objects = {}, verlets = {},verletSticks = {}, polygons = {},cloths = {}, deltaT=0.03};
    function World:new(o)
      o = o or {}
      setmetatable(o, self)
      self.__index = self
      return o
    end
    
    -- add object to the world. it will add to the end of the table.
    function World:addBall(obj)
      table.insert(self.balls, obj);
    end
    
    function World:addObject(obj)
      table.insert(self.objects,obj);
    end
    
    function World:addPolygons(...)
      for i,p in pairs({...}) do
          table.insert(self.polygons,p); 
      end
    end
    
    function World:addVerlets(...)
      for i,v in pairs({...}) do
        table.insert(self.verlets,v); 
      end
    end
    
    function World:addVerletSticks(...)
      for i,v in pairs({...}) do
        table.insert(self.verletSticks,v); 
      end
    end
    
    function World:updatePolygon(polygon)
      local poly = polygon;
      for i = 1, getTableSize(poly.points) do
        local p = poly.points[i];
        self:updateVerlets(p);
      end
      for i=1, 3 do
        for i = 1, getTableSize(poly.points) do
          local p = poly.points[i];
          self:constrainPoints(p);
        end

        for i = 1, getTableSize(poly.lines) do
          local l = poly.lines[i];
          self:updateVerletSticks(l);
        end
        end
      
    end
    
    function World:updateVerlets(v)
        if v.pinned == false then
          v.velocity[1] = v.x - v.oldX;
          v.velocity[2] = v.y - v.oldY;
          
          v.oldX = v.x;
          v.oldY = v.y;
          v.x = (v.x + v.velocity[1]);
          v.y = (v.y + v.velocity[2]);
          v.y = v.y + (self.gravity*self.deltaT);
          
        end
    end
    
    function World:constrainPoints(v)
        if v.pinned == false then
          v.velocity[1] = v.x - v.oldX;
          v.velocity[2] = v.y - v.oldY;
          v:checkCollisionWithWall(self.minX, self.maxX, self.minY, self.maxY);
        end
    end
    
    function World:updateVerletSticks(v)
          local dx = v.p1.x - v.p0.x;
          local dy = v.p1.y - v.p0.y;
          
          local dist = math.sqrt(dx*dx + dy*dy);
          local difference = v.length - dist;
          local percent = difference / dist / 2;
          offsetX = dx*percent;
          offsetY = dy*percent;
          
          if v.p0.pinned == false then
            v.p0.x = v.p0.x - offsetX;
            v.p0.y = v.p0.y - offsetY;
          end
          if v.p1.pinned == false then
            v.p1.x = v.p1.x + offsetX;
            v.p1.y = v.p1.y + offsetY;
          end
    end
    
    -- pass in as many Worldobjects as needed
    function World:hideObjects(...)
      for i,v in pairs({...}) do
        v.series.Visible = false;
      end
    end
    
    -- pass in as many Worldobjects as needed
    function World:showObjects(...)
      for i,v in pairs({...}) do
        v.series.Visible = true;
      end
    end
    
    
      -- transform all balls to their current position;
      -- all balls must initially set to {0,0} position
      -- all balls must have individual series setup!
      function World:updateTransform()
        for i=1,getTableSize(self.balls) do
          local b = self.balls[i];
          b.series.Transform = matrixf.translation(b.x, b.y, 1);
        end
        for i=1,getTableSize(self.objects) do
          local o = self.objects[i];
          o.series.Transform = matrixf.translation(o.x, o.y, 1);
        end
      end
    
      function World:restartWorld()
        for i=1,getTableSize(self.balls) do
          local b = self.balls[i];
          b.series.Visible = true;
          b:resetInitialState();
        end
        for i=1,getTableSize(self.objects) do
          local o = self.objects[i];
          o.series.Visible = true;
          o:resetInitialState();
        end
        for i=1,getTableSize(self.verlets) do
          local o = self.verlets[i];
          o:resetInitialState();
        end
      end
      
      function World:setInitialVariables()
        for i=1,getTableSize(self.balls) do
          local b = self.balls[i];
          b:setInitialVariables();
        end
        for i=1,getTableSize(self.objects) do
          local o = self.objects[i];
          o:setInitialVariables();
        end
        for i=1,getTableSize(self.verlets) do
          local v = self.verlets[i];
          v:setInitialVariables();
          v:initDrawing();
        end
        for i=1,getTableSize(self.verletSticks) do
          local s = self.verletSticks[i];
          s:setInitialVariables();
        end
        for i=1,getTableSize(self.polygons) do
          local p = self.polygons[i];
          p:init();
        end
      end
      
      function World:drawAllObjects()
        for i=1,getTableSize(self.balls) do
          local b = self.balls[i];
          b:drawObject();
        end
        for i=1,getTableSize(self.objects) do
          local o = self.objects[i];
          o:drawObject();
        end
        for i=1,getTableSize(self.verlets) do
          local v = self.verlets[i];
          v:drawObject();
        end
        for i=1,getTableSize(self.verletSticks) do
          local v = self.verletSticks[i];
          v:drawObject();
        end
        for i=1,getTableSize(self.polygons) do
          local p = self.polygons[i];
          p:drawObject();
        end
      end
      
      -- CURRENTY RELIES ON OUTSIDE LINES BEING VISIBLE TO DETERMINE THEM, FIND SOME OTHER WAY TO DETERMINE THE LINES OUTSIDE
      function World:detectCollision(body1, body2, text)
        for i=1, (body1.segments + body2.segments) do
        
          local boundaryEdges1 = body1:getBoundaryEdges();
          local boundaryEdges2 = body2:getBoundaryEdges();
          local edge = {};
          
          if i <= getTableSize(boundaryEdges1) then
            edge = boundaryEdges1[i];
          else
            edge = boundaryEdges2[i - getTableSize(boundaryEdges1)];
          end
          
          local axis = Vector.new(edge.p0.y - edge.p1.y, edge.p1.x - edge.p0.x);
          axis:normalize();
          
          local minA = 0;
          local minB = 0;
          local maxA = 0;
          local maxB = 0;
          
          dotP = body1:projectToAxis(axis,minA,maxA);
          dotP2 = body2:projectToAxis(axis,minB,maxB);
          text.Text = "dotProduct"..minA;
          
          -- calculate distance between two intervals
          local distance = intervalDistance(minA,maxA,minB,maxB);
          
          if distance > 0 then
            return false;
          end
        end
        -- there is no separating axis, report collision
        return true;
      end
            
      -- Update World by one deltaT
      function World:update(text)      
       -- polygons
       for i=1,getTableSize(self.polygons) do
          local p = self.polygons[i];
          p.series:Clear();
          self:updatePolygon(p);
        end
        for i=1,getTableSize(self.verlets) do
          local v = self.verlets[i];
          self:updateVerlets(v);
          self:constrainPoints(v);
        end
        
        if self:detectCollision(self.polygons[1], self.polygons[2], text) == true then
          
        end

      end

    --------------------------- WorldObject Class ---------------------------
      -- mass is kg
      -- velocity has x and y component (m/s; 1 pixel = 1 m)
      -- series is the plotTools series
      -- This is a generic world object which other objects can inherit from
    
      WorldObject = {x = 0, y = 0, mass = 0, velocity = {0,0}, series};
      function WorldObject:new(o)
        o = o or {};
        setmetatable(o, self);
        self.__index = self;
        World:addObject(self);
        return o;
      end

      function WorldObject:setInitialVariables()
        self.initX = self.x;
        self.initY = self.y;
        self.initMass = self.mass;
        self.initVelocity = {self.velocity[1], self.velocity[2]};
      end
  
      function WorldObject:getVelocity()
        local vel = math.sqrt(math.pow(self.velocity[1],2) + math.pow(self.velocity[2],2));
        return vel;
      end
      
      function WorldObject:updatePosition(period)
        self:drawObject();
        self.x = self.x + self.velocity[1]*period;
        self.y = self.y + self.velocity[2]*period;
      end
      
      function WorldObject:drawObject()
        self.series.Transform = matrixf.translation(self.x,self.y,0);
      end
      
      function WorldObject:resetInitialState()
        self.x = self.initX;
        self.y = self.initY;
        self.mass = self.initMass;
        self.velocity = {self.initVelocity[1], self.initVelocity[2]};
        self.impact = 0;
      end
      
      function WorldObject:hide()
        self.series.Visible = false;
      end
      
      function WorldObject:show()
        self.series.Visible = true;
      end

    --------------------------- Ball Object ---------------------------

      -- mass is kg
      -- velocity has x and y component (m/s; 1 pixel = 1 m)
      -- series is the plotTools series
      -- must also declare RADIUS when create the Ball object
      
      Ball = WorldObject:new();
      function Ball:new(o)
        o = o or {}
        setmetatable(o, self)
        self.__index = self;
        return o
      end
        
      function Ball:handleCollision(ball)
        local xDist = self.x - ball.x;
        local yDist = self.y - ball.y;
        local distSquared = (xDist*xDist) + (yDist*yDist);
    
        if distSquared <= ((self.radius + ball.radius)*(self.radius + ball.radius)) then
          xVelocity = ball.velocity[1] - self.velocity[1];
          yVelocity = ball.velocity[2] - self.velocity[2];
      
          dotProduct = xDist*xVelocity + yDist*yVelocity;
      
          if dotProduct > 0 then
            collisionScale = dotProduct / distSquared;
            xCollision = xDist*collisionScale;
            yCollision = yDist*collisionScale;
        
            combinedMass = self.mass + ball.mass;
            collisionWeightA = 2*(ball.mass/combinedMass);
            collisionWeightB = 2*(self.mass/combinedMass);
        
            self.velocity[1] = self.velocity[1] + (collisionWeightA*xCollision);
            self.velocity[2] = self.velocity[2] + (collisionWeightA*yCollision);
            ball.velocity[1] = ball.velocity[1] - (collisionWeightA*xCollision);
            ball.velocity[2] = ball.velocity[2] - (collisionWeightA*yCollision);
          end
         end  
      end
      
      -- resolve border collision with the world
      function Ball:resolveBorderCollisionWith(world)
        if (world.minX ~= nil and self.x-self.radius < world.minX) or (world.maxX ~= nil and self.x+self.radius > world.maxX) then
          self.velocity[1] = -self.velocity[1];
        elseif (world.minY ~= nil and self.y < world.minY+self.radius) or (world.maxY ~= nil and self.y+self.radius > world.maxY - self.radius) then
          self.velocity[2] = -self.velocity[2];
        end
      end
      
      function Ball:handleCollisionWithRectangle(rect)
        if rect.impact < 1 then
          local xDist = rect.x - self.x;
          local yDist = (rect.y + (rect.height/2)) - self.y;
          local distSquared = (xDist*xDist) + (yDist*yDist);
          
          if distSquared <= self.radius*self.radius then
            self.velocity = {rect.velocity[1],rect.velocity[2]};
            rect.velocity = {0,0};
            rect.impact = rect.impact + 1;
          end
         end
      end
      
      --------------------------- VERLET TEST Object ---------------------------
      VerletObject = WorldObject:new({x = 0, y = 0, oldX = 0, oldY = 0, pinned = false, radius = 1});
      function VerletObject:new(o)
        o = o or {};
        setmetatable(o, self);
        self.__index = self;
        World:addVerlets(self);
        return o;
      end
      
      function VerletObject:setInitialVariables()
        self.initX = self.x;
        self.initY = self.y;
        self.initOldX = self.oldX;
        self.initOldY = self.oldY;
        self.initMass = self.mass;
      end
      
      function VerletObject:NoVelocity()
        self.oldX = self.x;
        self.oldY = self.y;
      end
      
      function VerletObject:initDrawing()
        plotTools.drawCircle(self.series, vector({0,0}), self.radius)
      end
      
      function VerletObject:resetInitialState()
        self.x = self.initX;
        self.y = self.initY;
        self.oldX = self.initOldX;
        self.oldY = self.initOldY;
        self.mass = self.initMass;
      end
      
      function VerletObject:checkCollisionWithWall(minX, maxX, minY, maxY)
        minY = minY + self.radius;
        minX = minX + self.radius;
        maxY = maxY - self.radius;
        maxX = maxX - self.radius;
        if self.x > maxX then
          self.x = maxX;
          self.oldX = self.x + self.velocity[1];
        elseif self.x < minX then
          self.x = minX;
          self.oldX = self.x + self.velocity[1];
        end
        
        if self.y > maxY then
          self.y = maxY;
          self.oldY = self.y + self.velocity[2];
        elseif self.y < minY then
          self.y = minY;
          self.oldY = self.y + self.velocity[2];
        end
      end
      
      function VerletObject:checkCollisionWithObject(obj)
        local x = self.x - obj.x;
        local y = self.y - obj.y;
        
        local slength = x*x + y*y;
        local length = math.sqrt(slength);
        local target = self.radius + obj.radius;
        
        --if spheres closer than their radii combined
        if length < target then
          local v1x = self.x - self.oldX;
          local v1y = self.y - self.oldY;
          local v2x = obj.x - obj.oldX;
          local v2y = obj.y - obj.oldY;
          
          local factor = (length - target)/length;
          self.x = self.x - x*factor*0.5;
          self.y = self.y - y*factor*0.5;
          obj.x = obj.x + x*factor*0.5;
          obj.y = obj.y + y*factor*0.5;
          
        end
        
      end
      
      --------------------------- VERLET STICK Object ---------------------------
      VerletStick = WorldObject:new({p0, p1, length = 0,show=true,boundary=false});
      function VerletStick:new(o)
        o = o or {};
        setmetatable(o, self);
        self.__index = self;
        World:addVerletSticks(self);
        return o;
      end
      
      function VerletStick:setInitialVariables()
        self.length = self:distance(self.p0,self.p1);
      end 
      
      function VerletStick:distance(p0,p1)
        local dx = math.abs(self.p1.x - self.p0.x);
        local dy = math.abs(self.p1.y - self.p0.y);
        dist = math.sqrt(dx*dx + dy*dy);
        return dist;
      end
      
      function VerletStick:drawObject()
        if self.show == true then
          self.series:Add(self.p0.x, self.p0.y);
          self.series:Add(self.p1.x, self.p1.y);
        end
      end
      
      --------------------------- Regular Polygon ---------------------------
      RegularPolygon = {x = 0, y = 0, radius = 0, segments = 1, points = {}, lines = {}, boundaryLines = {}, center, series, filled = false};
      function RegularPolygon:new(o)
        o = o or {};
        setmetatable(o, self);
        self.__index = self;
        return o;
      end
      
      function RegularPolygon:init()
        
       local stride = (2*math.pi)/self.segments;

        -- points
        for i = 1, self.segments do
          local theta = i*stride;
          self.points[i] = VerletObject:new({x = self.x + math.cos(theta)*self.radius, y = self.y+math.sin(theta)*self.radius, radius = 1, series=self.series,pinned = false});
        end
        
        self.center = VerletObject:new({x = self.x, y = self.y, radius=1,series = self.series});
        table.insert(self.points,self.center);
        
        -- constraints
        for i = 1, self.segments do
          if i < self.segments then
            table.insert(self.lines,VerletStick:new({p0 = self.points[i], p1 = self.points[i+1],series = self.series,boundary=true}));
            table.insert(self.boundaryLines,VerletStick:new({p0 = self.points[i], p1 = self.points[i+1],series = self.series,boundary=true}));
          elseif i == self.segments then
            table.insert(self.lines,VerletStick:new({p0 = self.points[i], p1 = self.points[1],series = self.series,boundary=true}));
            table.insert(self.boundaryLines,VerletStick:new({p0 = self.points[i], p1 = self.points[1],series = self.series,boundary=true}));
          end
          
          table.insert(self.lines,VerletStick:new({p0 = self.points[i], p1 = self.center,series = self.series,show=self.insideLines}));
            local a = i+5;
            local b = self.segments;
            local index = a - (math.floor(a/b)*b);
            if index == 0 then
              index = 1;
            end
            
            table.insert(self.lines,VerletStick:new({p0 = self.points[i], p1 = self.points[index],series = self.series,show=self.insideLines}));
        end
        
        self:initPointsLines();
          
      end
      
      function RegularPolygon:initPointsLines()
        -- set initial variables
        for i = 1, getTableSize(self.points) do
          self.points[i]:setInitialVariables();
          self.points[i]:NoVelocity();
        end
        
        -- set initial variables
        for i = 1, getTableSize(self.lines) do
          self.lines[i]:setInitialVariables();
        end
        
        -- initial Drawings
        for i=1,getTableSize(self.lines) do
          self.series:Add(self.lines[i].p0.x, self.lines[i].p0.y);
          self.series:Add(self.lines[i].p1.x, self.lines[i].p1.y);
        end	
      end
      
      -- overriding WorldObject drawObject method
      function RegularPolygon:drawObject()
        for i = 1, getTableSize(self.lines) do
          self.lines[i]:drawObject();
        end
      end
      
      function RegularPolygon:projectToAxis(axis, min, max)
        -- LAST INDEX IS ALWAYS CENTER POINT
        local vec = Vector.new(self.points[1].x,self.points[1].y); 
        local dotP = dotProduct(axis,vec);
        min = dotP;
        max = dotP;
                
        for i=2, getTableSize(self.points) do
          vec.x = self.points[i].x;
          vec.y = self.points[i].y;
          dotP = dotProduct(axis,vec);
          
          min = math.min(dotP,min);
          max = math.max(dotP,max);
        end
        
        return dotP;
      end
      
      function RegularPolygon:getNumVisibleEdges()
        local counter = 0;
        for i=1, getTableSize(self.lines) do
          if self.lines[i].show == true then
            counter = counter + 1;
          end
        end
        return counter;
      end
      
      function RegularPolygon:getNumBoundaryEdges()
        local counter = 0;
        for i=1, getTableSize(self.lines) do
          if self.lines[i].boundary == true then
            counter = counter + 1;
          end
        end
        return counter;
      end
      
      function RegularPolygon:getBoundaryEdges()
        -- updates and returns
        emptyTable(self.boundaryLines);
        for i=1, getTableSize(self.lines) do
          if self.lines[i].boundary == true then
            table.insert(self.boundaryLines,self.lines[i]);
          end
        end
        return self.boundaryLines;
      end

      --------------------------- Cloth Polygon ---------------------------
      Cloth = RegularPolygon:new({x = 0, y = 0, width = 0, height = 0, segments = 1, points = {}, lines = {}, series, filled = false, pinned = false});
      function Cloth:new(o)
        o = o or {};
        setmetatable(o, self);
        self.__index = self;
        return o;
      end
      
      function Cloth:init()
        local xStride = self.width/self.segments;
        local yStride = self.height/self.segments;
        
        local x;
        local y;
        
        for y=0, (self.segments - 1) do
          for x=0, (self.segments - 1) do
            local px = self.x+(x*xStride) - self.width/2 + xStride/2;
            local py = self.y+(y*yStride) - self.height/2 + yStride/2;
            table.insert(self.points,VerletObject:new({x = px, y = py, radius = 1, series=self.series, pinned = false}));
            
            if x > 0 then
              table.insert(self.lines,VerletStick:new({p0 = self.points[y*self.segments+x+1], p1 = self.points[y*self.segments+x-1+1],series = self.series}));
            end
            if y > 0 then
              table.insert(self.lines,VerletStick:new({p0 = self.points[y*self.segments+x+1], p1 = self.points[(y-1)*self.segments+x+1],series = self.series}));
              self:initPointsLines();
            end
          end
        end
        
        if self.pinned == true then
          local index = self.segments*self.segments;
          self.points[index].pinned = true;
          
          local start = index - self.segments + 1;
          for i=0, self.segments -1 do
            self.points[start+i].pinned = true;
          end
        end
      end
      
      -- moves all pinned coordinates by certain x and y amount
      function Cloth:movePinnedCoordinates(x,y)
        local index = self.segments*self.segments;
        local start = index - self.segments + 1;
        
        self.points[index].x = self.points[index].initX + x;
        self.points[index].y = self.points[index].initY + y;
        for i=0, self.segments-1 do
            self.points[start+i].x = self.points[start+i].initX + x;
            self.points[start+i].y = self.points[start+i].initY + y;
        end
      end
      
   ]]>
  </script>
</fragment>