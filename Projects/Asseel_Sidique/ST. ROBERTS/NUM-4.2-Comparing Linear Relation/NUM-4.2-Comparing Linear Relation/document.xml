<?xml version="1.0" encoding="utf-8"?>
<document xmlns="http://resources.qdexapps.com/schema/v1/QDocument.xsd" name="myDocument" id="GA09B7951_44EA_4845_A3DC_D404FCCA3A6D">

  <!-- Meta Data -->
  <metadata>
    <title>NUM-4.2-Comparing Linear Relations</title>
    <creator>Sidique</creator>
    <coverImage src="resources/cover.png" />
    <abstract>This document is for testing purposes only. The material that is presented here should be treated as an example only.</abstract>
  </metadata>
  <include src="resources/curriculumStyles.xml" />
  <include src="resources/Utilities.xml" />
  <include src="resources/plotTools.xml" />

  <!--                                      Header & Footer START                                         -->
  <header style="backgroundColor">
    <stack style="center" orientation="horizontal">
      <p style="whiteColor">Amanda Koon</p>
      <p style="whiteColor rightText">NUMERACY</p>
    </stack>
  </header>
  <footer style="backgroundColor">
    <stack orientation="horizontal">
      <image style="tiny" src="resources/logo1.png" inspect="false" />
      <p style="fontColor">
        <style>
          <numbering suffix="true" counter="pages" />
          <textAlignment>center</textAlignment>
          <marginTop>30</marginTop>
          <foreground color="255 255 255" />
        </style>
      </p>
      <image style="tiny" src="resources/logo2.png" inspect="false" />
    </stack>
  </footer>

  <section name="section1" style="pageLayout">
    <title style="chapterTitle">4.2 Comparing Linear Relations</title>
    <image src="resources/comparinglinear.png"></image>
    <stack style="contentBG">
      <p>
        In this module, we are going to look at comparing two linear functions; even if they are not in the same form. We can represent a linear function as an equation,
        a T-table and a graph.
      </p>
    </stack>
  </section>

  <sectionNoTitle name="section2" style="pageLayout">
    <p style="sectionHeading">Comparing Equation vs Graph</p>
    <stack style="contentBG">
      <p>Let's say we are given a function and a graph and we must determine the rates of both of these functions. How would we do so?</p>
      <p>Let $ f(x) = -2x + 1 $</p>
      <p>Let $ g(x) =$ the function plotted below</p>
      <xyPlot name="p2" pan="custom" tap="custom" zoom="disabled" manual="true">
        <onDocumentOpened>
          plotTools.drawArrow(yaxis, vector({0, -10}), vector({0, 10}), color.black);
          plotTools.drawArrow(xaxis, vector({-10, 0}), vector({10, 0}), color.black);
          labelSize = 0.4;
          distanceApart = 1;
          distanceAxis = -0.5;
          begin = 0.95
          beginY = 0.8
          char.textX(label, vector({9, 0.2}), 0.4, color.black);
          char.textY(label, vector({0.2, 9}), 0.4, color.black);
          char.num1(label, vector({begin, distanceAxis}), labelSize, color.black);
          char.num2(label, vector({begin+distanceApart*1, distanceAxis}), labelSize, color.black);
          char.num3(label, vector({begin+distanceApart*2, distanceAxis}), labelSize, color.black);
          char.num4(label, vector({begin+distanceApart*3, distanceAxis}), labelSize, color.black);
          char.num5(label, vector({begin+distanceApart*4, distanceAxis}), labelSize, color.black);
          char.num6(label, vector({begin+distanceApart*5, distanceAxis}), labelSize, color.black);
          char.num7(label, vector({begin+distanceApart*6, distanceAxis}), labelSize, color.black);
          char.num8(label, vector({begin+distanceApart*7, distanceAxis}), labelSize, color.black);
          char.num9(label, vector({begin+distanceApart*8, distanceAxis}), labelSize, color.black);


          char.num1(label, vector({distanceAxis, beginY+distanceApart*0}), labelSize, color.black);
          char.num2(label, vector({distanceAxis, beginY+distanceApart*1}), labelSize, color.black);
          char.num3(label, vector({distanceAxis, beginY+distanceApart*2}), labelSize, color.black);
          char.num4(label, vector({distanceAxis, beginY+distanceApart*3}), labelSize, color.black);
          char.num5(label, vector({distanceAxis, beginY+distanceApart*4}), labelSize, color.black);
          char.num6(label, vector({distanceAxis, beginY+distanceApart*5}), labelSize, color.black);
          char.num7(label, vector({distanceAxis, beginY+distanceApart*6}), labelSize, color.black);
          char.num8(label, vector({distanceAxis, beginY+distanceApart*7}), labelSize, color.black);
          char.num9(label, vector({distanceAxis, beginY+distanceApart*8}), labelSize, color.black);


          distanceApart = -1;
          distanceAxis = -0.5;
          begin = -0.95
          beginY = -1.2
          minSignOffset = 0.2;
          symbol.drawMinus(label, vector({begin - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num1(label, vector({begin, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*1 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num2(label, vector({begin+distanceApart*1, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*2 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num3(label, vector({begin+distanceApart*2, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*3 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num4(label, vector({begin+distanceApart*3, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*4 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num5(label, vector({begin+distanceApart*4, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*5 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num6(label, vector({begin+distanceApart*5, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*6 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num7(label, vector({begin+distanceApart*6, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*7 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num8(label, vector({begin+distanceApart*7, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*8 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num9(label, vector({begin+distanceApart*8, distanceAxis}), labelSize, color.black);

          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY}), labelSize, color.black)
          char.num1(label, vector({distanceAxis, beginY}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*1}), labelSize, color.black)
          char.num2(label, vector({distanceAxis, beginY+distanceApart*1}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*2}), labelSize, color.black)
          char.num3(label, vector({distanceAxis, beginY+distanceApart*2}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*3}), labelSize, color.black)
          char.num4(label, vector({distanceAxis, beginY+distanceApart*3}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*4}), labelSize, color.black)
          char.num5(label, vector({distanceAxis, beginY+distanceApart*4}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*5}), labelSize, color.black)
          char.num6(label, vector({distanceAxis, beginY+distanceApart*5}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*6}), labelSize, color.black)
          char.num7(label, vector({distanceAxis, beginY+distanceApart*6}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*7}), labelSize, color.black)
          char.num8(label, vector({distanceAxis, beginY+distanceApart*7}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*8}), labelSize, color.black)
          char.num9(label, vector({distanceAxis, beginY+distanceApart*8}), labelSize, color.black);


          for i=-10, 10, 0.01 do
          graph:Add(i, i*-4-5);
          end

          for i=-10, 10, 1 do
          line:Add(i, -10);
          line:Add(i, 10);
          line:Add(-10, i);
          line:Add(10, i);
          end
        </onDocumentOpened>
        <onPan>
          scaledX = p2.XAxis.Min + state.Current.X * (p2.XAxis.Max - p2.XAxis.Min);
          scaledY = p2.YAxis.Min + state.Current.Y * (p2.YAxis.Max - p2.YAxis.Min);
          x = (round(scaledY, 0.1)+5)/-4;
          y = round(scaledY, 0.1)
          points:Add(x, y);
          hide2.points1.Text = "(" .. tostring(round(x,0.1)) .. "," .. tostring(y) .. ")";
        </onPan>
        <axis name="XAxis" dim="x" min="-10" max="10" auto="none" minor="false" />
        <axis name="YAxis" dim="y" min="-10" max="10" auto="none" minor="false" />
        <series name="line" draw="lineSegments">
          <style>
            <lineThickness>1</lineThickness>
            <foreground color="lightGray" />
          </style>
        </series>
        <series name="yaxis">
          <style>
            <foreground color="black" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
        <series name="xaxis">
          <style>
            <foreground color="black" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
        
        <series name="points3" draw="points">
          <style>
            <foreground color="red" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
        <series name="label"></series>
        <series name="graph">
          <style>
            <lineThickness>1.5</lineThickness>
            <foreground color="red" />
          </style>
        </series>
        <series name="points" draw="points" capacity="1">
          <style>
            <foreground color="red" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
      </xyPlot>
      <p style="subSectionHeading">Determine slope of $ f(x) $</p>
      <stack name="hide1">
        <style>
          <visibility>collapsed</visibility>
        </style>
        <p>We know that $ f(x) = -2x+1 $ is a linear function because it is in the form $ y = mx + b $. The $ m $ in a linear function represents the slope, which
        is the same as the rate of change. So for $ f(x) = -2x+1 $ the slope is $ -2 $</p>
      </stack>
      <button name="btn1" content="Show Answer">
        <onClick>
          if btn1.Text == "Show Answer" then
            btn1.Text = "Hide Answer";
            hide1.Style.Visibility = "visible";
          else
            btn1.Text = "Show Answer";
            hide1.Style.Visibility = "collapsed";
          end
        </onClick>
      </button>
      
      <p style="subSectionHeading">Determine slope of $ g(x) $</p>
      <stack name="hide2">
        <style>
          <visibility>collapsed</visibility>
        </style>
        <p>
          In order to determine the slope of $ g(x) $, we need to take any 2 points that are on $ g(x) $. Since we don't have an equation or table, we must use the graph.
          Take any two points on the graph, preferrably ones that are on a whole number. Drag your finger accross the graph to see all the points on the function and select two that are
          easiest to work with.
        </p>

      <equation name="points1">(0,0)</equation>
      <p>Let's use $ (-1, -1) $ and $ (0, -5) $ since they are easy to work with.</p>
      <p>To find the slope of this graph, we have to plug in our two points in the formula $ \frac{y_{2} - y_{1}}{x_{2} - x_{1}} $. This is also known as the rise over run.</p>
      <equation>$ \frac{-5 - (-1)}{0 - (-1)} $</equation>
      <equation>$ \frac{-4}{1} $</equation>
      <equation>Slope $ = -4 $</equation>
      </stack>
      <button name="btn2" content="Show Answer">
        <onClick>
          if btn2.Text == "Show Answer" then
          btn2.Text = "Hide Answer";
          hide2.Style.Visibility = "visible";
          else
          btn2.Text = "Show Answer";
          hide2.Style.Visibility = "collapsed";
          end
        </onClick>
      </button>
    </stack>
    <p style="sectionHeading">Analysis</p>
    <stack style="contentBG">
      <stack name="mcStack" style="mcStackLayout">
        <script>
          local mcController = MCController:new({choiceBtns={choicesTable:Child(2):Child(1).btn, choicesTable:Child(2):Child(2).btn, choicesTable:Child(4):Child(1).btn, choicesTable:Child(4):Child(2).btn}, checkBtn=checkBtn, answer=4})
        </script>
        <p style="subSectionHeading">Question 1</p>
        <table widths="10% 90%" grid="false">
          <row>
            <column>
              <image src="resources/question.png" inspect="false" />
            </column>
            <column>
              <p style="justifiedText">Which of these statements about $ f(x) $ and $ g(x) $ is true?</p>
            </column>
          </row>
        </table>
        <table name="choicesTable" grid="false" widths="50% 50%">
          <row>
            <column>
              <equation>$ f(x) $ and $ g(x) $ are both increasing, and $ f(x) $ is increasing faster than $ g(x) $</equation>
            </column>
            <column>
              <equation>$ f(x) $ and $ g(x) $ are both increasing, and $ g(x) $ is increasing faster than $ f(x) $</equation>
            </column>
          </row>
          <row>
            <column>
              <button name="btn" content="A" style="btnUnselected">
                <onClick>
                  mcController:select(1)
                </onClick>
              </button>
            </column>
            <column>
              <button name="btn" content="B" style="btnUnselected">
                <onClick>
                  mcController:select(2)
                </onClick>
              </button>
            </column>
          </row>
          <row>
            <column>
              <equation>$ f(x) $ and $ g(x) $ are both decreasing, and $ f(x) $ is decreasing faster than $ g(x) $</equation>
            </column>
            <column>
              <equation>$ f(x) $ and $ g(x) $ are both decreasing, and $ g(x) $ is decreasing faster than $ f(x) $</equation>
            </column>
          </row>
          <row>
            <column>
              <button name="btn" content="C" style="btnUnselected">
                <onClick>
                  mcController:select(3)
                </onClick>
              </button>
            </column>
            <column>
              <button name="btn" content="D" style="btnUnselected">
                <onClick>
                  mcController:select(4)
                </onClick>
              </button>
            </column>
          </row>
        </table>
        <button name="checkBtn" content="Check Answer">
          <onClick>
            mcController:checkAnswer()
          </onClick>
        </button>
      </stack>
    </stack>
  </sectionNoTitle>

  <sectionNoTitle style="pageLayout">
    <p style="sectionHeading">Comparing Table vs Graph</p>
    <stack style="contentBG">
      <p>A linear function can be represented in a T-Table as well. Let's see how we compare a linear function represented by a T-Table vs one that is represented
      on a graph.</p>
      <p>Let $ f(x) $ be defined by the following table:</p>
      <table name="t1">
        <style>
          <widthPercentage>60%</widthPercentage>
          <horizontalAlignment>center</horizontalAlignment>
        </style>
        <row>
          <column>
            <p>X Values</p>
          </column>
          <column>
            <p>Y Values</p>
          </column>
        </row>
        <row>
          <column>
            <p>-8</p>
          </column>
          <column>
            <p>-8</p>
          </column>
        </row>
        <row>
          <column>
            <p>-6</p>
          </column>
          <column>
            <p>-4</p>
          </column>
        </row>
        <row>
          <column>
            <p>-4</p>
          </column>
          <column>
            <p>0</p>
          </column>
        </row>
        <row>
          <column>
            <p>-2</p>
          </column>
          <column>
            <p>4</p>
          </column>
        </row>
        <row>
          <column>
            <p>0</p>
          </column>
          <column>
            <p>8</p>
          </column>
        </row>
        <row>
          <column>
            <p>2</p>
          </column>
          <column>
            <p>12</p>
          </column>
        </row>
      </table>
      <p>Let $ g(x) =$ the function plotted below</p>
      <xyPlot name="p2" pan="custom" tap="custom" zoom="disabled" manual="true">
        <onDocumentOpened>
          plotTools.drawArrow(yaxis, vector({0, -10}), vector({0, 10}), color.black);
          plotTools.drawArrow(xaxis, vector({-10, 0}), vector({10, 0}), color.black);
          labelSize = 0.4;
          distanceApart = 1;
          distanceAxis = -0.5;
          begin = 0.95
          beginY = 0.8
          char.textX(label, vector({9, 0.2}), 0.4, color.black);
          char.textY(label, vector({0.2, 9}), 0.4, color.black);
          char.num1(label, vector({begin, distanceAxis}), labelSize, color.black);
          char.num2(label, vector({begin+distanceApart*1, distanceAxis}), labelSize, color.black);
          char.num3(label, vector({begin+distanceApart*2, distanceAxis}), labelSize, color.black);
          char.num4(label, vector({begin+distanceApart*3, distanceAxis}), labelSize, color.black);
          char.num5(label, vector({begin+distanceApart*4, distanceAxis}), labelSize, color.black);
          char.num6(label, vector({begin+distanceApart*5, distanceAxis}), labelSize, color.black);
          char.num7(label, vector({begin+distanceApart*6, distanceAxis}), labelSize, color.black);
          char.num8(label, vector({begin+distanceApart*7, distanceAxis}), labelSize, color.black);
          char.num9(label, vector({begin+distanceApart*8, distanceAxis}), labelSize, color.black);


          char.num1(label, vector({distanceAxis, beginY+distanceApart*0}), labelSize, color.black);
          char.num2(label, vector({distanceAxis, beginY+distanceApart*1}), labelSize, color.black);
          char.num3(label, vector({distanceAxis, beginY+distanceApart*2}), labelSize, color.black);
          char.num4(label, vector({distanceAxis, beginY+distanceApart*3}), labelSize, color.black);
          char.num5(label, vector({distanceAxis, beginY+distanceApart*4}), labelSize, color.black);
          char.num6(label, vector({distanceAxis, beginY+distanceApart*5}), labelSize, color.black);
          char.num7(label, vector({distanceAxis, beginY+distanceApart*6}), labelSize, color.black);
          char.num8(label, vector({distanceAxis, beginY+distanceApart*7}), labelSize, color.black);
          char.num9(label, vector({distanceAxis, beginY+distanceApart*8}), labelSize, color.black);


          distanceApart = -1;
          distanceAxis = -0.5;
          begin = -0.95
          beginY = -1.2
          minSignOffset = 0.2;
          symbol.drawMinus(label, vector({begin - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num1(label, vector({begin, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*1 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num2(label, vector({begin+distanceApart*1, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*2 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num3(label, vector({begin+distanceApart*2, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*3 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num4(label, vector({begin+distanceApart*3, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*4 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num5(label, vector({begin+distanceApart*4, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*5 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num6(label, vector({begin+distanceApart*5, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*6 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num7(label, vector({begin+distanceApart*6, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*7 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num8(label, vector({begin+distanceApart*7, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*8 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num9(label, vector({begin+distanceApart*8, distanceAxis}), labelSize, color.black);

          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY}), labelSize, color.black)
          char.num1(label, vector({distanceAxis, beginY}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*1}), labelSize, color.black)
          char.num2(label, vector({distanceAxis, beginY+distanceApart*1}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*2}), labelSize, color.black)
          char.num3(label, vector({distanceAxis, beginY+distanceApart*2}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*3}), labelSize, color.black)
          char.num4(label, vector({distanceAxis, beginY+distanceApart*3}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*4}), labelSize, color.black)
          char.num5(label, vector({distanceAxis, beginY+distanceApart*4}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*5}), labelSize, color.black)
          char.num6(label, vector({distanceAxis, beginY+distanceApart*5}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*6}), labelSize, color.black)
          char.num7(label, vector({distanceAxis, beginY+distanceApart*6}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*7}), labelSize, color.black)
          char.num8(label, vector({distanceAxis, beginY+distanceApart*7}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*8}), labelSize, color.black)
          char.num9(label, vector({distanceAxis, beginY+distanceApart*8}), labelSize, color.black);


          for i=-10, 10, 0.01 do
            graph:Add(i, i*0.5-4);
          end
      
          for i=-10, 10, 1 do
          line:Add(i, -10);
          line:Add(i, 10);
          line:Add(-10, i);
          line:Add(10, i);
          end
        </onDocumentOpened>
        <onPan>
          scaledX = p2.XAxis.Min + state.Current.X * (p2.XAxis.Max - p2.XAxis.Min);
          scaledY = p2.YAxis.Min + state.Current.Y * (p2.YAxis.Max - p2.YAxis.Min);
          y = (round(scaledX, 0.1))*0.5-4;
          x = round(scaledX, 0.1)
          points:Add(x, y);
          hide2.points1.Text = "(" .. tostring(round(x,0.1)) .. "," .. tostring(y) .. ")";
        </onPan>
        <axis name="XAxis" dim="x" min="-10" max="10" auto="none" minor="false" />
        <axis name="YAxis" dim="y" min="-10" max="10" auto="none" minor="false" />
        <series name="line" draw="lineSegments">
          <style>
            <lineThickness>1</lineThickness>
            <foreground color="lightGray" />
          </style>
        </series>
        <series name="yaxis">
          <style>
            <foreground color="black" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
        <series name="xaxis">
          <style>
            <foreground color="black" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>

        <series name="points3" draw="points">
          <style>
            <foreground color="red" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
        <series name="label"></series>
        <series name="graph">
          <style>
            <lineThickness>1.5</lineThickness>
            <foreground color="red" />
          </style>
        </series>
        <series name="points" draw="points" capacity="1">
          <style>
            <foreground color="red" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
      </xyPlot>
      <p style="subSectionHeading">Determine slope of $ f(x) $</p>
      <stack name="hide1">
        <style>
          <visibility>collapsed</visibility>
        </style>
        <p>
          We know that $ f(x) $ is a linear function because if we calculate the first differences, we see that they are constant. If we plug any two points into the equation $ \frac{y_{2} - y_{1}}{x_{2} - x_{1}} $,
          our slope/rate of change will be $ = \frac{1}{2} $.
        </p>
      </stack>
      <button name="btn1" content="Show Answer">
        <onClick>
          if btn1.Text == "Show Answer" then
          btn1.Text = "Hide Answer";
          hide1.Style.Visibility = "visible";
          else
          btn1.Text = "Show Answer";
          hide1.Style.Visibility = "collapsed";
          end
        </onClick>
      </button>

      <p style="subSectionHeading">Determine slope of $ g(x) $</p>
      <stack name="hide2">
        <style>
          <visibility>collapsed</visibility>
        </style>
        <p>
          In order to determine the slope of $ g(x) $, we need to take any 2 points that are on $ g(x) $. Since we have don't have an equation or table, we must use the graph.
          Take any two points on the graph, preferrably ones that are on a whole number. Drag your finger accross the graph to see all the points on the function and select two that are
          easiest to work with.
        </p>

        <equation name="points1">(0,0)</equation>
        <p>Let's use $ (0, -4) $ and $ (6, -1) $ since they are easy to work with.</p>
        <p>To find the slope of this graph, we have to plug in our two points in the formula $ \frac{y_{2} - y_{1}}{x_{2} - x_{1}} $. This is also known as the rise over run.</p>
        <equation>$ \frac{-1 - (-4)}{6 - (0)} $</equation>
        <equation>$ \frac{3}{6} $</equation>
        <equation>Slope $ = \frac{1}{2} $</equation>
      </stack>
      <button name="btn2" content="Show Answer">
        <onClick>
          if btn2.Text == "Show Answer" then
          btn2.Text = "Hide Answer";
          hide2.Style.Visibility = "visible";
          else
          btn2.Text = "Show Answer";
          hide2.Style.Visibility = "collapsed";
          end
        </onClick>
      </button>
    </stack>
    <p style="sectionHeading">Analysis</p>
    <stack style="contentBG">
      <stack name="mcStack" style="mcStackLayout">
        <script>
          local mcController = MCController:new({choiceBtns={choicesTable:Child(2):Child(1).btn, choicesTable:Child(2):Child(2).btn, choicesTable:Child(4):Child(1).btn, choicesTable:Child(4):Child(2).btn}, checkBtn=checkBtn, answer=2})
        </script>
        <p style="subSectionHeading">Question 1</p>
        <table widths="10% 90%" grid="false">
          <row>
            <column>
              <image src="resources/question.png" inspect="false" />
            </column>
            <column>
              <p style="justifiedText">Which of these statements about $ f(x) $ and $ g(x) $ is true?</p>
            </column>
          </row>
        </table>
        <table name="choicesTable" grid="false" widths="50% 50%">
          <row>
            <column>
              <equation>$ f(x) $ and $ g(x) $ are both increasing, and $ f(x) $ is increasing faster than $ g(x) $</equation>
            </column>
            <column>
              <equation>$ f(x) $ and $ g(x) $ are both increasing, and $ g(x) $ is increasing the same as $ f(x) $</equation>
            </column>
          </row>
          <row>
            <column>
              <button name="btn" content="A" style="btnUnselected">
                <onClick>
                  mcController:select(1)
                </onClick>
              </button>
            </column>
            <column>
              <button name="btn" content="B" style="btnUnselected">
                <onClick>
                  mcController:select(2)
                </onClick>
              </button>
            </column>
          </row>
          <row>
            <column>
              <equation>$ f(x) $ and $ g(x) $ are both decreasing, and $ f(x) $ is decreasing faster than $ g(x) $</equation>
            </column>
            <column>
              <equation>$ f(x) $ and $ g(x) $ are both decreasing, and $ g(x) $ is decreasing the same as $ f(x) $</equation>
            </column>
          </row>
          <row>
            <column>
              <button name="btn" content="C" style="btnUnselected">
                <onClick>
                  mcController:select(3)
                </onClick>
              </button>
            </column>
            <column>
              <button name="btn" content="D" style="btnUnselected">
                <onClick>
                  mcController:select(4)
                </onClick>
              </button>
            </column>
          </row>
        </table>
        <button name="checkBtn" content="Check Answer">
          <onClick>
            mcController:checkAnswer()
          </onClick>
        </button>
      </stack>
    </stack>
  </sectionNoTitle>

  <sectionNoTitle name="section4" style="pageLayout">
    <p style="sectionHeading">Practice</p>
    <stack style="contentBG">
      <p style="subSectionHeading">Question 1</p>
      <xyPlot name="p2" pan="custom" tap="custom" zoom="disabled" manual="true">
        <onDocumentOpened>
          for i=-10, 10, 1 do
          line:Add(i, -10);
          line:Add(i, 10);
          line:Add(-10, i);
          line:Add(10, i);
          end
          plotTools.drawArrow(yaxis, vector({0, -10}), vector({0, 10}), color.black);
          plotTools.drawArrow(xaxis, vector({-10, 0}), vector({10, 0}), color.black);
          labelSize = 0.4;
          distanceApart = 1;
          distanceAxis = -0.5;
          begin = 0.95
          beginY = 0.8
          char.textX(label, vector({9, 0.2}), 0.4, color.black);
          char.textY(label, vector({0.2, 9}), 0.4, color.black);
          char.num1(label, vector({begin, distanceAxis}), labelSize, color.black);
          char.num2(label, vector({begin+distanceApart*1, distanceAxis}), labelSize, color.black);
          char.num3(label, vector({begin+distanceApart*2, distanceAxis}), labelSize, color.black);
          char.num4(label, vector({begin+distanceApart*3, distanceAxis}), labelSize, color.black);
          char.num5(label, vector({begin+distanceApart*4, distanceAxis}), labelSize, color.black);
          char.num6(label, vector({begin+distanceApart*5, distanceAxis}), labelSize, color.black);
          char.num7(label, vector({begin+distanceApart*6, distanceAxis}), labelSize, color.black);
          char.num8(label, vector({begin+distanceApart*7, distanceAxis}), labelSize, color.black);
          char.num9(label, vector({begin+distanceApart*8, distanceAxis}), labelSize, color.black);


          char.num1(label, vector({distanceAxis, beginY+distanceApart*0}), labelSize, color.black);
          char.num2(label, vector({distanceAxis, beginY+distanceApart*1}), labelSize, color.black);
          char.num3(label, vector({distanceAxis, beginY+distanceApart*2}), labelSize, color.black);
          char.num4(label, vector({distanceAxis, beginY+distanceApart*3}), labelSize, color.black);
          char.num5(label, vector({distanceAxis, beginY+distanceApart*4}), labelSize, color.black);
          char.num6(label, vector({distanceAxis, beginY+distanceApart*5}), labelSize, color.black);
          char.num7(label, vector({distanceAxis, beginY+distanceApart*6}), labelSize, color.black);
          char.num8(label, vector({distanceAxis, beginY+distanceApart*7}), labelSize, color.black);
          char.num9(label, vector({distanceAxis, beginY+distanceApart*8}), labelSize, color.black);


          distanceApart = -1;
          distanceAxis = -0.5;
          begin = -0.95
          beginY = -1.2
          minSignOffset = 0.2;
          symbol.drawMinus(label, vector({begin - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num1(label, vector({begin, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*1 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num2(label, vector({begin+distanceApart*1, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*2 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num3(label, vector({begin+distanceApart*2, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*3 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num4(label, vector({begin+distanceApart*3, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*4 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num5(label, vector({begin+distanceApart*4, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*5 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num6(label, vector({begin+distanceApart*5, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*6 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num7(label, vector({begin+distanceApart*6, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*7 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num8(label, vector({begin+distanceApart*7, distanceAxis}), labelSize, color.black);
          symbol.drawMinus(label, vector({begin+distanceApart*8 - minSignOffset, distanceAxis}), labelSize, color.black)
          char.num9(label, vector({begin+distanceApart*8, distanceAxis}), labelSize, color.black);

          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY}), labelSize, color.black)
          char.num1(label, vector({distanceAxis, beginY}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*1}), labelSize, color.black)
          char.num2(label, vector({distanceAxis, beginY+distanceApart*1}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*2}), labelSize, color.black)
          char.num3(label, vector({distanceAxis, beginY+distanceApart*2}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*3}), labelSize, color.black)
          char.num4(label, vector({distanceAxis, beginY+distanceApart*3}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*4}), labelSize, color.black)
          char.num5(label, vector({distanceAxis, beginY+distanceApart*4}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*5}), labelSize, color.black)
          char.num6(label, vector({distanceAxis, beginY+distanceApart*5}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*6}), labelSize, color.black)
          char.num7(label, vector({distanceAxis, beginY+distanceApart*6}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*7}), labelSize, color.black)
          char.num8(label, vector({distanceAxis, beginY+distanceApart*7}), labelSize, color.black);
          symbol.drawMinus(label, vector({distanceAxis - minSignOffset, beginY+distanceApart*8}), labelSize, color.black)
          char.num9(label, vector({distanceAxis, beginY+distanceApart*8}), labelSize, color.black);


          for i=-10, 10, 0.01 do
          graph:Add(i, i*0.5-4);
          graph2:Add(i, i*-4-5);
          graph3:Add(i, i*3-10);
          graph4:Add(i, i*5+5);
          end

          char.textA(label2, vector({8, 0.25}), 0.5, color.red);
          char.textB(label2, vector({-2.75, 7}), 0.5, color.green);
          char.textC(label2, vector({3.5, 2}), 0.5, color.purple);
          char.textD(label2, vector({0.5, 5}), 0.5, color.blue);

        </onDocumentOpened>
        <onPan>
          scaledX = p2.XAxis.Min + state.Current.X * (p2.XAxis.Max - p2.XAxis.Min);
          scaledY = p2.YAxis.Min + state.Current.Y * (p2.YAxis.Max - p2.YAxis.Min);
          y = round(scaledY, 0.1);
          x = round(scaledX, 0.1)
          points:Add(x, y);
          points1.Text = "(" .. tostring(round(x,0.1)) .. "," .. tostring(y) .. ")";
        </onPan>
        <axis name="XAxis" dim="x" min="-10" max="10" auto="none" minor="false" />
        <axis name="YAxis" dim="y" min="-10" max="10" auto="none" minor="false" />
        <series name="line" draw="lineSegments">
          <style>
            <lineThickness>1</lineThickness>
            <foreground color="lightGray" />
          </style>
        </series>
        <series name="yaxis">
          <style>
            <foreground color="black" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
        <series name="xaxis">
          <style>
            <foreground color="black" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
        <series name="label2"></series>
        <series name="points3" draw="points">
          <style>
            <foreground color="red" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
        <series name="label"></series>
        <series name="graph">
          <style>
            <lineThickness>1.5</lineThickness>
            <foreground color="red" />
          </style>
        </series>
        <series name="graph2">
          <style>
            <lineThickness>1.5</lineThickness>
            <foreground color="green" />
          </style>
        </series>
        <series name="graph3">
          <style>
            <lineThickness>1.5</lineThickness>
            <foreground color="purple" />
          </style>
        </series>
        <series name="graph4">
          <style>
            <lineThickness>1.5</lineThickness>
            <foreground color="blue" />
          </style>
        </series>
        <series name="points" draw="points" capacity="1">
          <style>
            <foreground color="gray" />
            <lineThickness>1.5</lineThickness>
          </style>
        </series>
      </xyPlot>
      <equation name="points1">(0,0)</equation>
      <stack name="mcStack" style="mcStackLayout">
        <script>
          local mcController = MCController:new({choiceBtns={choicesTable:Child(2):Child(1).btn, choicesTable:Child(2):Child(2).btn, choicesTable:Child(4):Child(1).btn, choicesTable:Child(4):Child(2).btn}, checkBtn=checkBtn, answer=3})
        </script>
        <table widths="10% 90%" grid="false">
          <row>
            <column>
              <image src="resources/question.png" inspect="false" />
            </column>
            <column>
              <p>For the following graph below, determine which graph has the same rate as $ f(x) = 3x + 5 $</p>
            </column>
          </row>
        </table>
        <table name="choicesTable" grid="false" widths="50% 50%">
          <row>
            <column>
              <equation>$ A $</equation>
            </column>
            <column>
              <equation>$ B $</equation>
            </column>
          </row>
          <row>
            <column>
              <button name="btn" content="A" style="btnUnselected">
                <onClick>
                  mcController:select(1)
                </onClick>
              </button>
            </column>
            <column>
              <button name="btn" content="B" style="btnUnselected">
                <onClick>
                  mcController:select(2)
                </onClick>
              </button>
            </column>
          </row>
          <row>
            <column>
              <equation>$ C $</equation>
            </column>
            <column>
              <equation>$ D $</equation>
            </column>
          </row>
          <row>
            <column>
              <button name="btn" content="C" style="btnUnselected">
                <onClick>
                  mcController:select(3)
                </onClick>
              </button>
            </column>
            <column>
              <button name="btn" content="D" style="btnUnselected">
                <onClick>
                  mcController:select(4)
                </onClick>
              </button>
            </column>
          </row>
        </table>
        <button name="checkBtn" content="Check Answer">
          <onClick>
            mcController:checkAnswer()
          </onClick>
        </button>
      </stack>
    </stack>
  </sectionNoTitle>

</document>